// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metav1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// NodeStatusInsightApplyConfiguration represents an declarative configuration of the NodeStatusInsight type for use
// with apply.
type NodeStatusInsightApplyConfiguration struct {
	Name          *string                              `json:"name,omitempty"`
	Resource      *ResourceRefApplyConfiguration       `json:"resource,omitempty"`
	PoolResource  *PoolResourceRefApplyConfiguration   `json:"poolResource,omitempty"`
	Version       *string                              `json:"version,omitempty"`
	EstToComplete *v1.Duration                         `json:"estToComplete,omitempty"`
	Message       *string                              `json:"message,omitempty"`
	Conditions    []metav1.ConditionApplyConfiguration `json:"conditions,omitempty"`
}

// NodeStatusInsightApplyConfiguration constructs an declarative configuration of the NodeStatusInsight type for use with
// apply.
func NodeStatusInsight() *NodeStatusInsightApplyConfiguration {
	return &NodeStatusInsightApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithName(value string) *NodeStatusInsightApplyConfiguration {
	b.Name = &value
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithResource(value *ResourceRefApplyConfiguration) *NodeStatusInsightApplyConfiguration {
	b.Resource = value
	return b
}

// WithPoolResource sets the PoolResource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PoolResource field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithPoolResource(value *PoolResourceRefApplyConfiguration) *NodeStatusInsightApplyConfiguration {
	b.PoolResource = value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithVersion(value string) *NodeStatusInsightApplyConfiguration {
	b.Version = &value
	return b
}

// WithEstToComplete sets the EstToComplete field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EstToComplete field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithEstToComplete(value v1.Duration) *NodeStatusInsightApplyConfiguration {
	b.EstToComplete = &value
	return b
}

// WithMessage sets the Message field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Message field is set to the value of the last call.
func (b *NodeStatusInsightApplyConfiguration) WithMessage(value string) *NodeStatusInsightApplyConfiguration {
	b.Message = &value
	return b
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *NodeStatusInsightApplyConfiguration) WithConditions(values ...*metav1.ConditionApplyConfiguration) *NodeStatusInsightApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}
