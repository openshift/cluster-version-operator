// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// PoolUpdateStatusApplyConfiguration represents an declarative configuration of the PoolUpdateStatus type for use
// with apply.
type PoolUpdateStatusApplyConfiguration struct {
	Name      *string                            `json:"name,omitempty"`
	Resource  *PoolResourceRefApplyConfiguration `json:"resource,omitempty"`
	Informers []UpdateInformerApplyConfiguration `json:"informers,omitempty"`
}

// PoolUpdateStatusApplyConfiguration constructs an declarative configuration of the PoolUpdateStatus type for use with
// apply.
func PoolUpdateStatus() *PoolUpdateStatusApplyConfiguration {
	return &PoolUpdateStatusApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *PoolUpdateStatusApplyConfiguration) WithName(value string) *PoolUpdateStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithResource sets the Resource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Resource field is set to the value of the last call.
func (b *PoolUpdateStatusApplyConfiguration) WithResource(value *PoolResourceRefApplyConfiguration) *PoolUpdateStatusApplyConfiguration {
	b.Resource = value
	return b
}

// WithInformers adds the given value to the Informers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Informers field.
func (b *PoolUpdateStatusApplyConfiguration) WithInformers(values ...*UpdateInformerApplyConfiguration) *PoolUpdateStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithInformers")
		}
		b.Informers = append(b.Informers, *values[i])
	}
	return b
}
