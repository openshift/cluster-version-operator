/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/cluster-version-operator/pkg/apis/config.openshift.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterVersionLister helps list ClusterVersions.
type ClusterVersionLister interface {
	// List lists all ClusterVersions in the indexer.
	List(selector labels.Selector) (ret []*v1.ClusterVersion, err error)
	// ClusterVersions returns an object that can list and get ClusterVersions.
	ClusterVersions(namespace string) ClusterVersionNamespaceLister
	ClusterVersionListerExpansion
}

// clusterVersionLister implements the ClusterVersionLister interface.
type clusterVersionLister struct {
	indexer cache.Indexer
}

// NewClusterVersionLister returns a new ClusterVersionLister.
func NewClusterVersionLister(indexer cache.Indexer) ClusterVersionLister {
	return &clusterVersionLister{indexer: indexer}
}

// List lists all ClusterVersions in the indexer.
func (s *clusterVersionLister) List(selector labels.Selector) (ret []*v1.ClusterVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterVersion))
	})
	return ret, err
}

// ClusterVersions returns an object that can list and get ClusterVersions.
func (s *clusterVersionLister) ClusterVersions(namespace string) ClusterVersionNamespaceLister {
	return clusterVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterVersionNamespaceLister helps list and get ClusterVersions.
type ClusterVersionNamespaceLister interface {
	// List lists all ClusterVersions in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ClusterVersion, err error)
	// Get retrieves the ClusterVersion from the indexer for a given namespace and name.
	Get(name string) (*v1.ClusterVersion, error)
	ClusterVersionNamespaceListerExpansion
}

// clusterVersionNamespaceLister implements the ClusterVersionNamespaceLister
// interface.
type clusterVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterVersions in the indexer for a given namespace.
func (s clusterVersionNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterVersion))
	})
	return ret, err
}

// Get retrieves the ClusterVersion from the indexer for a given namespace and name.
func (s clusterVersionNamespaceLister) Get(name string) (*v1.ClusterVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("clusterversion"), name)
	}
	return obj.(*v1.ClusterVersion), nil
}
