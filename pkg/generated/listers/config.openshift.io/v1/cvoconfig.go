/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/openshift/cluster-version-operator/pkg/apis/config.openshift.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CVOConfigLister helps list CVOConfigs.
type CVOConfigLister interface {
	// List lists all CVOConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.CVOConfig, err error)
	// CVOConfigs returns an object that can list and get CVOConfigs.
	CVOConfigs(namespace string) CVOConfigNamespaceLister
	CVOConfigListerExpansion
}

// cVOConfigLister implements the CVOConfigLister interface.
type cVOConfigLister struct {
	indexer cache.Indexer
}

// NewCVOConfigLister returns a new CVOConfigLister.
func NewCVOConfigLister(indexer cache.Indexer) CVOConfigLister {
	return &cVOConfigLister{indexer: indexer}
}

// List lists all CVOConfigs in the indexer.
func (s *cVOConfigLister) List(selector labels.Selector) (ret []*v1.CVOConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CVOConfig))
	})
	return ret, err
}

// CVOConfigs returns an object that can list and get CVOConfigs.
func (s *cVOConfigLister) CVOConfigs(namespace string) CVOConfigNamespaceLister {
	return cVOConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CVOConfigNamespaceLister helps list and get CVOConfigs.
type CVOConfigNamespaceLister interface {
	// List lists all CVOConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.CVOConfig, err error)
	// Get retrieves the CVOConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.CVOConfig, error)
	CVOConfigNamespaceListerExpansion
}

// cVOConfigNamespaceLister implements the CVOConfigNamespaceLister
// interface.
type cVOConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CVOConfigs in the indexer for a given namespace.
func (s cVOConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.CVOConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.CVOConfig))
	})
	return ret, err
}

// Get retrieves the CVOConfig from the indexer for a given namespace and name.
func (s cVOConfigNamespaceLister) Get(name string) (*v1.CVOConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("cvoconfig"), name)
	}
	return obj.(*v1.CVOConfig), nil
}
